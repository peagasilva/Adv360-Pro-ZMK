#include <behaviors.dtsi>
#include <dt-bindings/zmk/backlight.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/rgb.h>

&caps_word {
    continue-list = <
        UNDERSCORE MINUS
        BACKSPACE DELETE
        N1 N2 N3 N4 N5 N6 N7 N8 N9 N0
    >;
};

/ {
    behaviors {
        #include "macros.dtsi"
    #include "version.dtsi"

    #ifndef VERSION_MACRO

        macro_ver: macro_ver {
            compatible = "zmk,behavior-macro";
            label = "macro_version";
            #binding-cells = <0>;
            bindings = <&kp RET>;
        };

        #endif

        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS";
            #binding-cells = <2>;
            tapping-term-ms = <200>;
            quick_tap_ms = <175>;
            flavor = "tap-preferred";
            bindings = <&kp>, <&kp>;
        };

        hmr: home_row_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_RIGHT";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            hold-trigger-on-release;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 14 15 16 17 18 19 20 28 29 30 31 32 33 34 35 36 37 38 46 47 48 49 50 51 52 53 60 61 62 63 64 65 66 67 68 69 70>;
            flavor = "balanced";
        };

        hml: home_row_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOME_ROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            quick-tap-ms = <150>;
            flavor = "balanced";
            hold-trigger-on-release;
            hold-trigger-key-positions = <12 13 21 22 23 24 25 26 27 37 38 39 40 41 42 43 44 45 53 54 55 56 57 58 59 68 69 70 71 72 73 74 75 7 8 9 10 11 36 52 65 66 67 35>;
        };

        key_lh_c3r1: key_lh_c3r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_LH_C3R1";
            bindings = <&kp LS(LEFT_BRACKET)>, <&kp LS(NUMBER_2)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_lh_c4r1: key_lh_c4r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_LH_C4R1";
            bindings = <&kp LEFT_BRACKET>, <&kp LS(NUMBER_3)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_lh_c5r1: key_lh_c5r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_LH_C5R1";
            bindings = <&kp LS(N9)>, <&kp LS(N4)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_rh_c2r1: key_rh_c2r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_RH_C2R1";
            bindings = <&kp LS(N7)>, <&kp LS(NUMBER_6)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_rh_c3r1: key_rh_c3r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_RH_C3R1";
            bindings = <&kp LS(N0)>, <&kp LS(N7)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_rh_c4r1: key_rh_c4r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_RH_C4R1";
            bindings = <&kp RIGHT_BRACKET>, <&kp LS(N8)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_rh_c5r1: key_rh_c5r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_RH_C5R1";
            bindings = <&kp LS(RIGHT_BRACKET)>, <&kp LS(N9)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        key_rh_c6r1: key_rh_c6r1 {
            compatible = "zmk,behavior-mod-morph";
            label = "KEY_RH_C6R1";
            bindings = <&kp LS(N8)>, <&kp LS(N0)>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    macros {
    };

    combos {
        compatible = "zmk,combos";

        combo_copy {
            bindings = <&kp LG(C)>;
            key-positions = <48 49>;
        };

        combo_paste {
            bindings = <&kp LG(V)>;
            key-positions = <49 50>;
        };

        combo_cut {
            bindings = <&kp LG(X)>;
            key-positions = <47 48>;
        };

        combo_caps_word {
            bindings = <&caps_word>;
            key-positions = <32 41>;
        };

        combo_select_all {
            bindings = <&kp LG(A)>;
            key-positions = <50 47>;
        };

        combo_undo {
            bindings = <&kp LG(Z)>;
            key-positions = <50 48>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp LS(N4)  &kp LS(N1)           &key_lh_c3r1     &key_lh_c4r1     &key_lh_c5r1       &kp EQUAL  &tog 1                                                                      &mo 3           &key_rh_c2r1  &key_rh_c3r1        &key_rh_c4r1      &key_rh_c5r1     &key_rh_c6r1            &kp MINUS
&kp LS(N2)  &kp Q                &kp W            &kp E            &kp R              &kp T      &kp LG(LS(N3))                                                              &kp LG(LS(N5))  &kp Y         &kp U               &kp I             &kp O            &kp P                   &kp BSLH
&kp ESCAPE  &hml LEFT_CONTROL A  &hml LEFT_ALT S  &hml LEFT_GUI D  &hml LEFT_SHIFT F  &kp G      &kp LG(LS(N4))  &kp GRAVE  &kp SPACE          &kp PERCENT    &kp LS(N3)     &kp LC(LG(Q))   &kp H         &hmr RIGHT_SHIFT J  &hmr RIGHT_GUI K  &hmr LEFT_ALT L  &hmr LEFT_CONTROL SEMI  &kp SQT
&kp LSHFT   &kp Z                &kp X            &kp C            &kp V              &kp B                                 &kp LEFT_GUI       &kp RIGHT_GUI                                 &kp N         &kp M               &kp COMMA         &kp DOT          &kp FSLH                &kp RSHFT
&mo 2       &kp HOME             &kp PAGE_DOWN    &kp PAGE_UP      &kp END                       &lt 1 RETURN    &kp TAB    &kp BACKSPACE      &kp RETURN     &kp BACKSPACE  &lt 1 SPACE                   &kp LEFT            &kp DOWN          &kp UP           &kp RIGHT               &mo 2
            >;
        };

        keypad {
            bindings = <
&kp EQUAL             &kp KP_MULTIPLY  &kp KP_SLASH     &kp KP_EQUAL  &kp KP_NUM    &kp N5                 &trans                                                             &mo 3      &kp N6                &kp KP_NUM    &kp KP_EQUAL  &kp KP_DIVIDE  &kp KP_MULTIPLY  &kp MINUS
&kp LEFT_PARENTHESIS  &kp KP_MINUS     &kp KP_NUMBER_9  &kp KP_N8     &kp KP_N7     &kp RIGHT_PARENTHESIS  &none                                                              &none      &kp LEFT_PARENTHESIS  &kp KP_N7     &kp KP_N8     &kp KP_N9      &kp KP_MINUS     &kp RIGHT_PARENTHESIS
&kp LEFT_BRACKET      &kp KP_PLUS      &kp KP_N6        &kp KP_N5     &kp KP_N4     &kp RIGHT_BRACKET      &none      &kp LCTRL      &kp LALT      &kp LGUI    &kp RCTRL      &none      &kp LEFT_BRACKET      &kp KP_N4     &kp KP_N5     &kp KP_N6      &kp KP_PLUS      &kp RIGHT_BRACKET
&kp LEFT_BRACE        &kp KP_ENTER     &kp KP_N3        &kp KP_N2     &kp KP_N1     &kp RIGHT_BRACE                                  &kp HOME      &trans                                &kp LEFT_BRACE        &kp KP_N1     &kp KP_N2     &kp KP_N3      &kp KP_ENTER     &kp RIGHT_BRACE
&mo 2                 &kp COLON        &kp KP_DOT       &kp KP_N0     &kp KP_COMMA                         &kp SPACE  &kp BACKSPACE  &kp END       &kp RETURN  &kp BACKSPACE  &kp SPACE                        &kp KP_COMMA  &kp KP_N0     &kp KP_DOT     &kp COLON        &mo 2
            >;
        };

        fn {
            bindings = <
&kp F1  &kp F2                &kp F3          &kp F4            &kp F5      &kp F6                &tog 1                                      &mo 3   &kp F7  &kp F8      &kp F9                     &kp F10                  &kp F11  &kp F12
&trans  &trans                &trans          &trans            &trans      &trans                &none                                       &none   &trans  &trans      &kp LS(LA(C_VOLUME_DOWN))  &kp LS(LA(C_VOLUME_UP))  &trans   &trans
&trans  &kp C_BRIGHTNESS_DEC  &kp C_PREVIOUS  &kp C_PLAY_PAUSE  &kp C_NEXT  &kp C_BRIGHTNESS_INC  &none   &trans  &trans      &trans  &trans  &none   &trans  &kp C_MUTE  &kp C_VOLUME_DOWN          &kp C_VOLUME_UP          &trans   &trans
&trans  &trans                &trans          &trans            &trans      &trans                                &trans      &trans                  &trans  &trans      &trans                     &trans                   &trans   &trans
&trans  &trans                &trans          &trans            &trans                            &trans  &trans  &trans      &trans  &trans  &trans          &trans      &trans                     &trans                   &trans   &trans
            >;
        };

        mod {
            bindings = <
&none  &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4  &none                                                  &trans                  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &bootloader                                            &bootloader             &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none         &none         &none        &none  &none      &bt BT_CLR  &none       &rgb_ug RGB_MEFS_CMD 5  &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &macro_ver    &none                             &none      &none                                           &none  &none       &none       &none  &none  &none
&none  &none         &none         &none         &none                       &none        &none  &none      &none       &bl BL_TOG  &rgb_ug RGB_TOG                &bl BL_INC  &bl BL_DEC  &none  &none  &none
            >;
        };
    };
};
